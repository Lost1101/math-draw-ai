import tkinter as tk
from PIL import Image, ImageGrab
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model

# Load the trained model
model = load_model('path_to_trained_model.h5')

class MathApp:
    class MathApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Math Recognizer")
        self.canvas = tk.Canvas(root, width=400, height=400, bg='white')
        self.canvas.pack()
        
        self.canvas.bind("<B1-Motion>", self.paint)
        
        self.button_clear = tk.Button(root, text="Clear", command=self.clear)
        self.button_clear.pack()
        
        self.button_recognize = tk.Button(root, text="Recognize", command=self.recognize)
        self.button_recognize.pack()

    def paint(self, event):
        x1, y1 = (event.x - 1), (event.y - 1)
        x2, y2 = (event.x + 1), (event.y + 1)
        self.canvas.create_oval(x1, y1, x2, y2, fill='black', width=5)

    def clear(self):
        self.canvas.delete("all")

    def recognize(self):
        # Capture the canvas as an image
        x = self.root.winfo_rootx() + self.canvas.winfo_x()
        y = self.root.winfo_rooty() + self.canvas.winfo_y()
        x1 = x + self.canvas.winfo_width()
        y1 = y + self.canvas.winfo_height()
        image = ImageGrab.grab().crop((x, y, x1, y1)).convert('L')
        
        # Preprocess the image
        image = image.resize((28, 28))
        image = np.array(image)
        image = image / 255.0
        image = image.reshape(1, 28, 28, 1)
        
        # Recognize the image using a trained model (to be defined)
        prediction = model.predict(image)
        digit = np.argmax(prediction)
        print("Recognized digit:", digit)

    def recognize(self):
        # Capture the canvas as an image
        x = self.root.winfo_rootx() + self.canvas.winfo_x()
        y = self.root.winfo_rooty() + self.canvas.winfo_y()
        x1 = x + self.canvas.winfo_width()
        y1 = y + self.canvas.winfo_height()
        image = ImageGrab.grab().crop((x, y, x1, y1)).convert('L')
        
        # Preprocess the image
        image = image.resize((28, 28))
        image = np.array(image)
        image = image / 255.0
        image = image.reshape(1, 28, 28, 1)
        
        # Recognize the image using a trained model
        prediction = model.predict(image)
        digit = np.argmax(prediction)
        
        # Display the recognized digit or symbol
        self.canvas.create_text(200, 200, text=str(digit), font=("Purisa", 48))

# Initialize the Tkinter application
root = tk.Tk()
app = MathApp(root)
root.mainloop()